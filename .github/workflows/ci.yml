name: ci

on:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'master'

jobs:
  build-builder:
    name: Build Builder
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    strategy:
      fail-fast: false
      matrix:
        build_type: ['builder']
        os_version: ['alpine']
    steps:
      - uses: e1himself/goss-installation-action@v1.0.4

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Environment Variables
        env:
          IMAGE_NAMESPACE: wayofdev/ansible
          TEMPLATE: ${{ matrix.build_type }}-${{ matrix.os_version }}
        run: |
          export RELEASE_VERSION=${GITHUB_REF#refs/*/}
          echo "IMAGE_NAMESPACE=${IMAGE_NAMESPACE}" >> $GITHUB_ENV
          echo "TEMPLATE=${TEMPLATE}" >> $GITHUB_ENV
          echo "VERSION=${RELEASE_VERSION:1}" >> $GITHUB_ENV

      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE_NAMESPACE }}
          tags: |
            type=raw,event=branch,value=latest
            type=ref,event=pr
          flavor: |
            latest=false
            prefix=${{ matrix.build_type }}-${{ matrix.os_version }}-

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Export to Docker
        uses: docker/build-push-action@v2
        with:
          context: ./dist/${{ env.TEMPLATE }}
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ env.IMAGE_TAG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

      - name: Test Docker Master Image
        if: success() && ! startsWith(github.ref, 'refs/tags/')
        run: |
          IMAGE_TAG=${{ env.IMAGE_NAMESPACE }}:${{ env.TEMPLATE }}-latest make test

      - name: Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ./dist/${{ env.TEMPLATE }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ env.IMAGE_TAG }}
          cache-to: type=inline

  build-base:
    name: Build Base
    runs-on: ubuntu-latest
    needs: build-builder
    strategy:
      fail-fast: false
      matrix:
        build_type: ['base']
        os_version: ['alpine']
    steps:
      - uses: e1himself/goss-installation-action@v1.0.4

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Environment Variables
        env:
          IMAGE_NAMESPACE: wayofdev/ansible
          TEMPLATE: ${{ matrix.build_type }}-${{ matrix.os_version }}
        run: |
          export RELEASE_VERSION=${GITHUB_REF#refs/*/}
          echo "IMAGE_NAMESPACE=${IMAGE_NAMESPACE}" >> $GITHUB_ENV
          echo "TEMPLATE=${TEMPLATE}" >> $GITHUB_ENV
          echo "VERSION=${RELEASE_VERSION:1}" >> $GITHUB_ENV

      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE_NAMESPACE }}
          tags: |
            type=raw,event=branch,value=latest
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          flavor: |
            latest=false
            prefix=${{ matrix.build_type }}-${{ matrix.os_version }}-

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Export to Docker
        uses: docker/build-push-action@v2
        with:
          context: ./dist/${{ env.TEMPLATE }}
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ env.IMAGE_TAG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

      - name: Test Docker Release Image
        if: success() && startsWith(github.ref, 'refs/tags/')
        run: |
          IMAGE_TAG=${{ env.IMAGE_NAMESPACE }}:${{ env.TEMPLATE }}-${{ env.VERSION }} make test

      - name: Test Docker Master Image
        if: success() && ! startsWith(github.ref, 'refs/tags/')
        run: |
          IMAGE_TAG=${{ env.IMAGE_NAMESPACE }}:${{ env.TEMPLATE }}-latest make test

      - name: Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ./dist/${{ env.TEMPLATE }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ env.IMAGE_TAG }}
          cache-to: type=inline
